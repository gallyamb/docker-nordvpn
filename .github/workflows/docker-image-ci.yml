# for NordVPN
name: Docker Image CI

on:
  workflow_dispatch:
  # push:
  #  paths-ignore:
  #     - '.github/**'
  #     - '*.md'
  #     - '.*'
  #     - '.LICENSE'
  #     - 'examples'
    # branches: [ "main" ]
    # tags: [ 'v*.*.*' ]
  # pull_request:
    # branches: [ "main" ]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # name of image
  IMAGE: nordvpn
  # github.repository as <account>/<repo>
  IMAGE_NAME: tmknight/nordvpn
  # cosign version
  COSIGN_VER: 'v1.13.1'
  # Build args
  BUILD_ARGS: |
    "UBUNTU_VER=22.04"
    "NORDVPN_VERSION=3.15.5"

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
    - uses: actions/checkout@v3

    # Setup QEMU for multi-arch
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
      with:
        platforms: amd64,arm64

    # Workaround: https://github.com/docker/build-push-action/issues/461
    - name: Setup Docker buildx
      uses: docker/setup-buildx-action@v2

    # Extract metadata (tags, labels) for Docker
    # https://github.com/docker/metadata-action
    - name: Extract Docker metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

    # Build and push Docker image with Buildx (don't push on PR)
    # https://github.com/docker/build-push-action
    # - name: Build Docker image amd64
    #   id: build-amd64
    #   uses: docker/build-push-action@v4
    #   with:
    #     context: .
    #     platforms: linux/amd64
    #     file: ${{ env.IMAGE }}.dockerfile
    #     build-args: ${{ env.BUILD_ARGS }}
    #     push: false
    #     tags: ${{ env.IMAGE_NAME }}:amd64
    #     labels: ${{ steps.meta.outputs.labels }}
    #     load: true
    #     cache-to: type=inline
    #     cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

    # - name: Run Docker image amd64
    #   run: |
    #     docker run --platform linux/amd64 --rm --cap-add NET_ADMIN ${{ env.IMAGE_NAME }}:amd64 bash -c \
    #     "00-firewall && 10-inet && 20-tun && 30-route && which iptables && iptables -V && iptables -L && exit $?"

    - name: Build Docker image arm64
      id: build-arm64
      uses: docker/build-push-action@v4
      with:
        context: .
        platforms: linux/arm64
        file: ${{ env.IMAGE }}.dockerfile
        build-args: ${{ env.BUILD_ARGS }}
        push: false
        tags: ${{ env.IMAGE_NAME }}:arm64
        labels: ${{ steps.meta.outputs.labels }}
        load: true
        cache-to: type=inline
        cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

    - name: Run Docker image arm64
      run: |
        docker run --platform linux/arm64 --rm --cap-add NET_ADMIN ${{ env.IMAGE_NAME }}:arm64 bash -c \
        "IPTABLES_LEGACY=1; iptables --help"
    - name: arm64 iptables-legacy
      run: |
        docker run --platform linux/arm64 --rm --cap-add NET_ADMIN ${{ env.IMAGE_NAME }}:arm64 bash -c \
        "iptables-legacy --help"
    - name: arm64 iptables-nft
      run: |
        docker run --platform linux/arm64 --rm --cap-add NET_ADMIN ${{ env.IMAGE_NAME }}:arm64 bash -c \
        "IPTABLES_LEGACY=1; iptables-nft --help"        
        # "00-firewall && 10-inet && 20-tun && 30-route && which iptables && iptables -V && iptables -L && exit $?"
